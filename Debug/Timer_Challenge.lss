
Timer_Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000076e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000076e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000076e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b39  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000991  00000000  00000000  000024a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c5f  00000000  00000000  00002e36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ac  00000000  00000000  00003a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000922  00000000  00000000  00003e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011a7  00000000  00000000  00004766  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  0000590d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 49 03 	jmp	0x692	; 0x692 <__vector_4>
  14:	0c 94 1d 03 	jmp	0x63a	; 0x63a <__vector_5>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	7d 02       	muls	r23, r29
  56:	80 02       	muls	r24, r16
  58:	84 02       	muls	r24, r20
  5a:	88 02       	muls	r24, r24
  5c:	8c 02       	muls	r24, r28
  5e:	90 02       	muls	r25, r16
  60:	94 02       	muls	r25, r20
  62:	98 02       	muls	r25, r24

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_clear_bss>:
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	a2 36       	cpi	r26, 0x62	; 98
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	0e 94 6f 01 	call	0x2de	; 0x2de <main>
  84:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <dcMotor1SetDCD>:
}

void dcMotor2Disable(void)
{
	gpioPinWrite(M2EN_GPIO, M2EN_BIT, LOW);
	timer2SwPWM(LOW,F_1000);
  8c:	cf 93       	push	r28
  8e:	c6 2f       	mov	r28, r22
  90:	62 e0       	ldi	r22, 0x02	; 2
  92:	0e 94 b9 02 	call	0x572	; 0x572 <timer2SwPWM>
  96:	cc 23       	and	r28, r28
  98:	19 f0       	breq	.+6      	; 0xa0 <dcMotor1SetDCD+0x14>
  9a:	c1 30       	cpi	r28, 0x01	; 1
  9c:	61 f0       	breq	.+24     	; 0xb6 <dcMotor1SetDCD+0x2a>
  9e:	15 c0       	rjmp	.+42     	; 0xca <dcMotor1SetDCD+0x3e>
  a0:	4f ef       	ldi	r20, 0xFF	; 255
  a2:	64 e0       	ldi	r22, 0x04	; 4
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	0e 94 16 01 	call	0x22c	; 0x22c <gpioPinWrite>
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	68 e0       	ldi	r22, 0x08	; 8
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	0e 94 16 01 	call	0x22c	; 0x22c <gpioPinWrite>
  b4:	0a c0       	rjmp	.+20     	; 0xca <dcMotor1SetDCD+0x3e>
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	64 e0       	ldi	r22, 0x04	; 4
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	0e 94 16 01 	call	0x22c	; 0x22c <gpioPinWrite>
  c0:	4f ef       	ldi	r20, 0xFF	; 255
  c2:	68 e0       	ldi	r22, 0x08	; 8
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	0e 94 16 01 	call	0x22c	; 0x22c <gpioPinWrite>
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <dcMotor1Enable>:
  ce:	4f ef       	ldi	r20, 0xFF	; 255
  d0:	60 e1       	ldi	r22, 0x10	; 16
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinDirection>
  d8:	4f ef       	ldi	r20, 0xFF	; 255
  da:	64 e0       	ldi	r22, 0x04	; 4
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinDirection>
  e2:	4f ef       	ldi	r20, 0xFF	; 255
  e4:	68 e0       	ldi	r22, 0x08	; 8
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinDirection>
  ec:	4f ef       	ldi	r20, 0xFF	; 255
  ee:	60 e1       	ldi	r22, 0x10	; 16
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	0e 94 16 01 	call	0x22c	; 0x22c <gpioPinWrite>
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 46 00 	call	0x8c	; 0x8c <dcMotor1SetDCD>
  fe:	08 95       	ret

00000100 <dcMotor2SetDCD>:
	
}

void dcMotor2SetDCD(uint8_t u8_dutyCycle, uint8_t u8_direction)
{
 100:	cf 93       	push	r28
 102:	c6 2f       	mov	r28, r22
	
	timer2SwPWM(u8_dutyCycle,F_1000);
 104:	62 e0       	ldi	r22, 0x02	; 2
 106:	0e 94 b9 02 	call	0x572	; 0x572 <timer2SwPWM>
	switch(u8_direction)
 10a:	cc 23       	and	r28, r28
 10c:	19 f0       	breq	.+6      	; 0x114 <dcMotor2SetDCD+0x14>
 10e:	c1 30       	cpi	r28, 0x01	; 1
 110:	61 f0       	breq	.+24     	; 0x12a <dcMotor2SetDCD+0x2a>
 112:	15 c0       	rjmp	.+42     	; 0x13e <dcMotor2SetDCD+0x3e>
	{
		case 0:
		        gpioPinWrite(M2D1_GPIO, M2D1_BIT, HIGH);
 114:	4f ef       	ldi	r20, 0xFF	; 255
 116:	60 e4       	ldi	r22, 0x40	; 64
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	0e 94 16 01 	call	0x22c	; 0x22c <gpioPinWrite>
				gpioPinWrite(M2D2_GPIO, M2D2_BIT, LOW);
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	60 e8       	ldi	r22, 0x80	; 128
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 16 01 	call	0x22c	; 0x22c <gpioPinWrite>
				break;	
 128:	0a c0       	rjmp	.+20     	; 0x13e <dcMotor2SetDCD+0x3e>
	    case 1:
				gpioPinWrite(M2D1_GPIO, M2D1_BIT, LOW);
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	60 e4       	ldi	r22, 0x40	; 64
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	0e 94 16 01 	call	0x22c	; 0x22c <gpioPinWrite>
				gpioPinWrite(M2D2_GPIO, M2D2_BIT, HIGH);
 134:	4f ef       	ldi	r20, 0xFF	; 255
 136:	60 e8       	ldi	r22, 0x80	; 128
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	0e 94 16 01 	call	0x22c	; 0x22c <gpioPinWrite>
				break;
		default:
		        break;
	}
}
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <dcMotor2Enable>:
 * Description:
 * @param value
 */
void dcMotor2Enable(void)
{
	gpioPinDirection(M2EN_GPIO, M2EN_BIT, OUTPUT);
 142:	4f ef       	ldi	r20, 0xFF	; 255
 144:	60 e2       	ldi	r22, 0x20	; 32
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinDirection>
	gpioPinDirection(M2D1_GPIO, M2D1_BIT, OUTPUT);
 14c:	4f ef       	ldi	r20, 0xFF	; 255
 14e:	60 e4       	ldi	r22, 0x40	; 64
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinDirection>
	gpioPinDirection(M2D2_GPIO, M2D2_BIT, OUTPUT);
 156:	4f ef       	ldi	r20, 0xFF	; 255
 158:	60 e8       	ldi	r22, 0x80	; 128
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinDirection>
	gpioPinWrite(M2EN_GPIO, M2EN_BIT, HIGH);
 160:	4f ef       	ldi	r20, 0xFF	; 255
 162:	60 e2       	ldi	r22, 0x20	; 32
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	0e 94 16 01 	call	0x22c	; 0x22c <gpioPinWrite>
	dcMotor2SetDCD(0, 0);
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 80 00 	call	0x100	; 0x100 <dcMotor2SetDCD>
 172:	08 95       	ret

00000174 <MoveForward>:
	}
}
//---------------------------------------------------------------------
//----------------------[ Robotic Car Control ]------------------------
void MoveForward(uint8_t u8_dutyCycle)
{
 174:	cf 93       	push	r28
 176:	c8 2f       	mov	r28, r24
	gpioPinWrite(M2D1_GPIO, M2D1_BIT, HIGH);
 178:	4f ef       	ldi	r20, 0xFF	; 255
 17a:	60 e4       	ldi	r22, 0x40	; 64
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	0e 94 16 01 	call	0x22c	; 0x22c <gpioPinWrite>
	gpioPinWrite(M2D2_GPIO, M2D2_BIT, LOW);
 182:	40 e0       	ldi	r20, 0x00	; 0
 184:	60 e8       	ldi	r22, 0x80	; 128
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	0e 94 16 01 	call	0x22c	; 0x22c <gpioPinWrite>
	gpioPinWrite(M1D1_GPIO, M1D1_BIT, HIGH);
 18c:	4f ef       	ldi	r20, 0xFF	; 255
 18e:	64 e0       	ldi	r22, 0x04	; 4
 190:	83 e0       	ldi	r24, 0x03	; 3
 192:	0e 94 16 01 	call	0x22c	; 0x22c <gpioPinWrite>
	gpioPinWrite(M1D2_GPIO, M1D2_BIT, LOW);
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	68 e0       	ldi	r22, 0x08	; 8
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	0e 94 16 01 	call	0x22c	; 0x22c <gpioPinWrite>
	timer2SwPWM(u8_dutyCycle,F_1000);
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	8c 2f       	mov	r24, r28
 1a4:	0e 94 b9 02 	call	0x572	; 0x572 <timer2SwPWM>
	
}
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <gpioPinDirection>:
* 				- 0x00 -> Input
* 				- 0xff -> Output
*/
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
	switch(u8_port)
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	a1 f0       	breq	.+40     	; 0x1d8 <gpioPinDirection+0x2c>
 1b0:	28 f0       	brcs	.+10     	; 0x1bc <gpioPinDirection+0x10>
 1b2:	82 30       	cpi	r24, 0x02	; 2
 1b4:	f9 f0       	breq	.+62     	; 0x1f4 <gpioPinDirection+0x48>
 1b6:	83 30       	cpi	r24, 0x03	; 3
 1b8:	59 f1       	breq	.+86     	; 0x210 <gpioPinDirection+0x64>
 1ba:	08 95       	ret
	{
		case GPIOA:
		{
			switch (u8_direction)
 1bc:	44 23       	and	r20, r20
 1be:	19 f0       	breq	.+6      	; 0x1c6 <gpioPinDirection+0x1a>
 1c0:	4f 3f       	cpi	r20, 0xFF	; 255
 1c2:	31 f0       	breq	.+12     	; 0x1d0 <gpioPinDirection+0x24>
 1c4:	08 95       	ret
			{
				case INPUT:
				PORTA_DIR &=(~u8_pins);
 1c6:	8a b3       	in	r24, 0x1a	; 26
 1c8:	60 95       	com	r22
 1ca:	68 23       	and	r22, r24
 1cc:	6a bb       	out	0x1a, r22	; 26
				break;
 1ce:	08 95       	ret
				
				case OUTPUT:
				PORTA_DIR |=(u8_pins);
 1d0:	8a b3       	in	r24, 0x1a	; 26
 1d2:	68 2b       	or	r22, r24
 1d4:	6a bb       	out	0x1a, r22	; 26
 1d6:	08 95       	ret
		}
		break;
		
		case GPIOB:
		{
			switch (u8_direction)
 1d8:	44 23       	and	r20, r20
 1da:	19 f0       	breq	.+6      	; 0x1e2 <gpioPinDirection+0x36>
 1dc:	4f 3f       	cpi	r20, 0xFF	; 255
 1de:	31 f0       	breq	.+12     	; 0x1ec <gpioPinDirection+0x40>
 1e0:	08 95       	ret
			{
				case INPUT:
				PORTB_DIR &=(~u8_pins);
 1e2:	87 b3       	in	r24, 0x17	; 23
 1e4:	60 95       	com	r22
 1e6:	68 23       	and	r22, r24
 1e8:	67 bb       	out	0x17, r22	; 23
				break;
 1ea:	08 95       	ret
				
				case OUTPUT:
				PORTB_DIR |=(u8_pins);
 1ec:	87 b3       	in	r24, 0x17	; 23
 1ee:	68 2b       	or	r22, r24
 1f0:	67 bb       	out	0x17, r22	; 23
 1f2:	08 95       	ret
		}
		break;
		
		case GPIOC:
		{
			switch (u8_direction)
 1f4:	44 23       	and	r20, r20
 1f6:	19 f0       	breq	.+6      	; 0x1fe <gpioPinDirection+0x52>
 1f8:	4f 3f       	cpi	r20, 0xFF	; 255
 1fa:	31 f0       	breq	.+12     	; 0x208 <gpioPinDirection+0x5c>
 1fc:	08 95       	ret
			{
				case INPUT:
				PORTC_DIR &=(~u8_pins);
 1fe:	84 b3       	in	r24, 0x14	; 20
 200:	60 95       	com	r22
 202:	68 23       	and	r22, r24
 204:	64 bb       	out	0x14, r22	; 20
				break;
 206:	08 95       	ret
				
				case OUTPUT:
				PORTC_DIR |=(u8_pins);
 208:	84 b3       	in	r24, 0x14	; 20
 20a:	68 2b       	or	r22, r24
 20c:	64 bb       	out	0x14, r22	; 20
 20e:	08 95       	ret
		}
		break;
		
		case GPIOD:
		{
			switch (u8_direction)
 210:	44 23       	and	r20, r20
 212:	19 f0       	breq	.+6      	; 0x21a <gpioPinDirection+0x6e>
 214:	4f 3f       	cpi	r20, 0xFF	; 255
 216:	31 f0       	breq	.+12     	; 0x224 <gpioPinDirection+0x78>
 218:	08 95       	ret
			{
				case INPUT:
				PORTD_DIR &=(~u8_pins);
 21a:	81 b3       	in	r24, 0x11	; 17
 21c:	60 95       	com	r22
 21e:	68 23       	and	r22, r24
 220:	61 bb       	out	0x11, r22	; 17
				break;
 222:	08 95       	ret
				
				case OUTPUT:
				PORTD_DIR |=(u8_pins);
 224:	81 b3       	in	r24, 0x11	; 17
 226:	68 2b       	or	r22, r24
 228:	61 bb       	out	0x11, r22	; 17
 22a:	08 95       	ret

0000022c <gpioPinWrite>:
	}
}

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
	switch(u8_value){
 22c:	44 23       	and	r20, r20
 22e:	19 f0       	breq	.+6      	; 0x236 <gpioPinWrite+0xa>
 230:	4f 3f       	cpi	r20, 0xFF	; 255
 232:	e9 f0       	breq	.+58     	; 0x26e <gpioPinWrite+0x42>
 234:	08 95       	ret
		case LOW:
		{
			switch (u8_port)
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	59 f0       	breq	.+22     	; 0x250 <gpioPinWrite+0x24>
 23a:	28 f0       	brcs	.+10     	; 0x246 <gpioPinWrite+0x1a>
 23c:	82 30       	cpi	r24, 0x02	; 2
 23e:	69 f0       	breq	.+26     	; 0x25a <gpioPinWrite+0x2e>
 240:	83 30       	cpi	r24, 0x03	; 3
 242:	81 f0       	breq	.+32     	; 0x264 <gpioPinWrite+0x38>
 244:	08 95       	ret
			{	
				case GPIOA:
				PORTA_DATA &= ~(u8_pins);   
 246:	8b b3       	in	r24, 0x1b	; 27
 248:	60 95       	com	r22
 24a:	68 23       	and	r22, r24
 24c:	6b bb       	out	0x1b, r22	; 27
				break;
 24e:	08 95       	ret
				
				case GPIOB:
				PORTB_DATA &= ~(u8_pins);
 250:	88 b3       	in	r24, 0x18	; 24
 252:	60 95       	com	r22
 254:	68 23       	and	r22, r24
 256:	68 bb       	out	0x18, r22	; 24
				break;
 258:	08 95       	ret
				
				case GPIOC:
				PORTC_DATA &= ~(u8_pins);
 25a:	85 b3       	in	r24, 0x15	; 21
 25c:	60 95       	com	r22
 25e:	68 23       	and	r22, r24
 260:	65 bb       	out	0x15, r22	; 21
				break;
 262:	08 95       	ret
				
				case GPIOD:
				PORTD_DATA &= ~(u8_pins);
 264:	82 b3       	in	r24, 0x12	; 18
 266:	60 95       	com	r22
 268:	68 23       	and	r22, r24
 26a:	62 bb       	out	0x12, r22	; 18
				break;
 26c:	08 95       	ret
				
			}
			break;
		}
		case HIGH:{
			switch (u8_port)
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	51 f0       	breq	.+20     	; 0x286 <gpioPinWrite+0x5a>
 272:	28 f0       	brcs	.+10     	; 0x27e <gpioPinWrite+0x52>
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	59 f0       	breq	.+22     	; 0x28e <gpioPinWrite+0x62>
 278:	83 30       	cpi	r24, 0x03	; 3
 27a:	69 f0       	breq	.+26     	; 0x296 <gpioPinWrite+0x6a>
 27c:	08 95       	ret
			{	
				case GPIOA:
				PORTA_DATA |=(u8_pins);
 27e:	8b b3       	in	r24, 0x1b	; 27
 280:	68 2b       	or	r22, r24
 282:	6b bb       	out	0x1b, r22	; 27
				break;
 284:	08 95       	ret
				
				case GPIOB:
				PORTB_DATA |=(u8_pins);
 286:	88 b3       	in	r24, 0x18	; 24
 288:	68 2b       	or	r22, r24
 28a:	68 bb       	out	0x18, r22	; 24
				break;
 28c:	08 95       	ret
				
				case GPIOC:
				PORTC_DATA |=(u8_pins);
 28e:	85 b3       	in	r24, 0x15	; 21
 290:	68 2b       	or	r22, r24
 292:	65 bb       	out	0x15, r22	; 21
				break;
 294:	08 95       	ret
				
				case GPIOD:
				PORTD_DATA |=(u8_pins);
 296:	82 b3       	in	r24, 0x12	; 18
 298:	68 2b       	or	r22, r24
 29a:	62 bb       	out	0x12, r22	; 18
 29c:	08 95       	ret

0000029e <Led_Init>:
LED_3

*/
void Led_Init(En_LedNumber_t en_led_id)
{
	switch(en_led_id)
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	61 f0       	breq	.+24     	; 0x2ba <Led_Init+0x1c>
 2a2:	28 f0       	brcs	.+10     	; 0x2ae <Led_Init+0x10>
 2a4:	82 30       	cpi	r24, 0x02	; 2
 2a6:	79 f0       	breq	.+30     	; 0x2c6 <Led_Init+0x28>
 2a8:	83 30       	cpi	r24, 0x03	; 3
 2aa:	99 f0       	breq	.+38     	; 0x2d2 <Led_Init+0x34>
 2ac:	08 95       	ret
	{
		case LED_0:
		gpioPinDirection(LED_0_GPIO,LED_0_BIT,OUTPUT);
 2ae:	4f ef       	ldi	r20, 0xFF	; 255
 2b0:	60 e1       	ldi	r22, 0x10	; 16
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinDirection>
		break;
 2b8:	08 95       	ret

		case LED_1:
		gpioPinDirection(LED_1_GPIO,LED_1_BIT,OUTPUT);
 2ba:	4f ef       	ldi	r20, 0xFF	; 255
 2bc:	60 e2       	ldi	r22, 0x20	; 32
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinDirection>
		break;
 2c4:	08 95       	ret

		case LED_2:
		gpioPinDirection(LED_2_GPIO,LED_2_BIT,OUTPUT);
 2c6:	4f ef       	ldi	r20, 0xFF	; 255
 2c8:	60 e4       	ldi	r22, 0x40	; 64
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinDirection>
		break;
 2d0:	08 95       	ret

		case LED_3:
		gpioPinDirection(LED_3_GPIO,LED_3_BIT,OUTPUT);
 2d2:	4f ef       	ldi	r20, 0xFF	; 255
 2d4:	60 e8       	ldi	r22, 0x80	; 128
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinDirection>
 2dc:	08 95       	ret

000002de <main>:
		//OCR2+=1;
	}
	
	return 0;*/
	
	SREG |=0b10000000;
 2de:	8f b7       	in	r24, 0x3f	; 63
 2e0:	80 68       	ori	r24, 0x80	; 128
 2e2:	8f bf       	out	0x3f, r24	; 63
	dcMotor1Enable();
 2e4:	0e 94 67 00 	call	0xce	; 0xce <dcMotor1Enable>
	dcMotor2Enable();
 2e8:	0e 94 a1 00 	call	0x142	; 0x142 <dcMotor2Enable>
	uint8_t u8_dutyCycle=0;
	Led_Init(LED_0);
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 4f 01 	call	0x29e	; 0x29e <Led_Init>
	while (1)
	{
		
		for (u8_dutyCycle=0;u8_dutyCycle<255;u8_dutyCycle++)
 2f2:	c0 e0       	ldi	r28, 0x00	; 0
		{
			MoveForward(u8_dutyCycle);
 2f4:	8c 2f       	mov	r24, r28
 2f6:	0e 94 ba 00 	call	0x174	; 0x174 <MoveForward>
			timer0DelayMs(20);
 2fa:	84 e1       	ldi	r24, 0x14	; 20
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 07 02 	call	0x40e	; 0x40e <timer0DelayMs>
	uint8_t u8_dutyCycle=0;
	Led_Init(LED_0);
	while (1)
	{
		
		for (u8_dutyCycle=0;u8_dutyCycle<255;u8_dutyCycle++)
 302:	cf 5f       	subi	r28, 0xFF	; 255
 304:	cf 3f       	cpi	r28, 0xFF	; 255
 306:	b1 f7       	brne	.-20     	; 0x2f4 <main+0x16>
			timer0DelayMs(20);
		}
		
		for (u8_dutyCycle=255;u8_dutyCycle>0;u8_dutyCycle--)
		{
			MoveForward(u8_dutyCycle);
 308:	8c 2f       	mov	r24, r28
 30a:	0e 94 ba 00 	call	0x174	; 0x174 <MoveForward>
			timer0DelayMs(20);
 30e:	84 e1       	ldi	r24, 0x14	; 20
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 07 02 	call	0x40e	; 0x40e <timer0DelayMs>
		{
			MoveForward(u8_dutyCycle);
			timer0DelayMs(20);
		}
		
		for (u8_dutyCycle=255;u8_dutyCycle>0;u8_dutyCycle--)
 316:	c1 50       	subi	r28, 0x01	; 1
 318:	b9 f7       	brne	.-18     	; 0x308 <main+0x2a>
 31a:	eb cf       	rjmp	.-42     	; 0x2f2 <main+0x14>

0000031c <timer0Init>:
		while (!TOV0);
		TIFR |= (TIFR<<0);
	}

	timer0Stop();
}
 31c:	ef 92       	push	r14
 31e:	0f 93       	push	r16
 320:	9e 2d       	mov	r25, r14
 322:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__DATA_REGION_ORIGIN__>
 326:	88 23       	and	r24, r24
 328:	19 f0       	breq	.+6      	; 0x330 <timer0Init+0x14>
 32a:	88 30       	cpi	r24, 0x08	; 8
 32c:	21 f0       	breq	.+8      	; 0x336 <timer0Init+0x1a>
 32e:	06 c0       	rjmp	.+12     	; 0x33c <timer0Init+0x20>
 330:	83 b7       	in	r24, 0x33	; 51
 332:	83 bf       	out	0x33, r24	; 51
 334:	03 c0       	rjmp	.+6      	; 0x33c <timer0Init+0x20>
 336:	83 b7       	in	r24, 0x33	; 51
 338:	88 60       	ori	r24, 0x08	; 8
 33a:	83 bf       	out	0x33, r24	; 51
 33c:	60 31       	cpi	r22, 0x10	; 16
 33e:	49 f0       	breq	.+18     	; 0x352 <timer0Init+0x36>
 340:	18 f4       	brcc	.+6      	; 0x348 <timer0Init+0x2c>
 342:	66 23       	and	r22, r22
 344:	91 f0       	breq	.+36     	; 0x36a <timer0Init+0x4e>
 346:	13 c0       	rjmp	.+38     	; 0x36e <timer0Init+0x52>
 348:	60 32       	cpi	r22, 0x20	; 32
 34a:	59 f0       	breq	.+22     	; 0x362 <timer0Init+0x46>
 34c:	60 33       	cpi	r22, 0x30	; 48
 34e:	29 f0       	breq	.+10     	; 0x35a <timer0Init+0x3e>
 350:	0e c0       	rjmp	.+28     	; 0x36e <timer0Init+0x52>
 352:	83 b7       	in	r24, 0x33	; 51
 354:	80 61       	ori	r24, 0x10	; 16
 356:	83 bf       	out	0x33, r24	; 51
 358:	0a c0       	rjmp	.+20     	; 0x36e <timer0Init+0x52>
 35a:	83 b7       	in	r24, 0x33	; 51
 35c:	80 63       	ori	r24, 0x30	; 48
 35e:	83 bf       	out	0x33, r24	; 51
 360:	06 c0       	rjmp	.+12     	; 0x36e <timer0Init+0x52>
 362:	83 b7       	in	r24, 0x33	; 51
 364:	80 62       	ori	r24, 0x20	; 32
 366:	83 bf       	out	0x33, r24	; 51
 368:	02 c0       	rjmp	.+4      	; 0x36e <timer0Init+0x52>
 36a:	83 b7       	in	r24, 0x33	; 51
 36c:	83 bf       	out	0x33, r24	; 51
 36e:	42 30       	cpi	r20, 0x02	; 2
 370:	99 f0       	breq	.+38     	; 0x398 <timer0Init+0x7c>
 372:	28 f4       	brcc	.+10     	; 0x37e <timer0Init+0x62>
 374:	44 23       	and	r20, r20
 376:	49 f0       	breq	.+18     	; 0x38a <timer0Init+0x6e>
 378:	41 30       	cpi	r20, 0x01	; 1
 37a:	51 f0       	breq	.+20     	; 0x390 <timer0Init+0x74>
 37c:	1c c0       	rjmp	.+56     	; 0x3b6 <timer0Init+0x9a>
 37e:	44 30       	cpi	r20, 0x04	; 4
 380:	99 f0       	breq	.+38     	; 0x3a8 <timer0Init+0x8c>
 382:	70 f0       	brcs	.+28     	; 0x3a0 <timer0Init+0x84>
 384:	45 30       	cpi	r20, 0x05	; 5
 386:	a1 f0       	breq	.+40     	; 0x3b0 <timer0Init+0x94>
 388:	16 c0       	rjmp	.+44     	; 0x3b6 <timer0Init+0x9a>
 38a:	83 b7       	in	r24, 0x33	; 51
 38c:	83 bf       	out	0x33, r24	; 51
 38e:	13 c0       	rjmp	.+38     	; 0x3b6 <timer0Init+0x9a>
 390:	83 b7       	in	r24, 0x33	; 51
 392:	81 60       	ori	r24, 0x01	; 1
 394:	83 bf       	out	0x33, r24	; 51
 396:	0f c0       	rjmp	.+30     	; 0x3b6 <timer0Init+0x9a>
 398:	83 b7       	in	r24, 0x33	; 51
 39a:	82 60       	ori	r24, 0x02	; 2
 39c:	83 bf       	out	0x33, r24	; 51
 39e:	0b c0       	rjmp	.+22     	; 0x3b6 <timer0Init+0x9a>
 3a0:	83 b7       	in	r24, 0x33	; 51
 3a2:	83 60       	ori	r24, 0x03	; 3
 3a4:	83 bf       	out	0x33, r24	; 51
 3a6:	07 c0       	rjmp	.+14     	; 0x3b6 <timer0Init+0x9a>
 3a8:	83 b7       	in	r24, 0x33	; 51
 3aa:	84 60       	ori	r24, 0x04	; 4
 3ac:	83 bf       	out	0x33, r24	; 51
 3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <timer0Init+0x9a>
 3b0:	83 b7       	in	r24, 0x33	; 51
 3b2:	85 60       	ori	r24, 0x05	; 5
 3b4:	83 bf       	out	0x33, r24	; 51
 3b6:	91 30       	cpi	r25, 0x01	; 1
 3b8:	49 f0       	breq	.+18     	; 0x3cc <timer0Init+0xb0>
 3ba:	28 f0       	brcs	.+10     	; 0x3c6 <timer0Init+0xaa>
 3bc:	92 30       	cpi	r25, 0x02	; 2
 3be:	51 f0       	breq	.+20     	; 0x3d4 <timer0Init+0xb8>
 3c0:	93 30       	cpi	r25, 0x03	; 3
 3c2:	61 f0       	breq	.+24     	; 0x3dc <timer0Init+0xc0>
 3c4:	0e c0       	rjmp	.+28     	; 0x3e2 <timer0Init+0xc6>
 3c6:	89 b7       	in	r24, 0x39	; 57
 3c8:	89 bf       	out	0x39, r24	; 57
 3ca:	0b c0       	rjmp	.+22     	; 0x3e2 <timer0Init+0xc6>
 3cc:	89 b7       	in	r24, 0x39	; 57
 3ce:	81 60       	ori	r24, 0x01	; 1
 3d0:	89 bf       	out	0x39, r24	; 57
 3d2:	07 c0       	rjmp	.+14     	; 0x3e2 <timer0Init+0xc6>
 3d4:	89 b7       	in	r24, 0x39	; 57
 3d6:	82 60       	ori	r24, 0x02	; 2
 3d8:	89 bf       	out	0x39, r24	; 57
 3da:	03 c0       	rjmp	.+6      	; 0x3e2 <timer0Init+0xc6>
 3dc:	89 b7       	in	r24, 0x39	; 57
 3de:	83 60       	ori	r24, 0x03	; 3
 3e0:	89 bf       	out	0x39, r24	; 57
 3e2:	22 bf       	out	0x32, r18	; 50
 3e4:	0c bf       	out	0x3c, r16	; 60
 3e6:	0f 91       	pop	r16
 3e8:	ef 90       	pop	r14
 3ea:	08 95       	ret

000003ec <timer0Stop>:
 3ec:	83 b7       	in	r24, 0x33	; 51
 3ee:	86 95       	lsr	r24
 3f0:	86 95       	lsr	r24
 3f2:	86 95       	lsr	r24
 3f4:	83 bf       	out	0x33, r24	; 51
 3f6:	83 b7       	in	r24, 0x33	; 51
 3f8:	88 0f       	add	r24, r24
 3fa:	88 0f       	add	r24, r24
 3fc:	88 0f       	add	r24, r24
 3fe:	83 bf       	out	0x33, r24	; 51
 400:	08 95       	ret

00000402 <timer0Start>:
 402:	93 b7       	in	r25, 0x33	; 51
 404:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 408:	89 2b       	or	r24, r25
 40a:	83 bf       	out	0x33, r24	; 51
 40c:	08 95       	ret

0000040e <timer0DelayMs>:
 40e:	cf 92       	push	r12
 410:	df 92       	push	r13
 412:	ef 92       	push	r14
 414:	ff 92       	push	r15
 416:	0f 93       	push	r16
 418:	6c 01       	movw	r12, r24
 41a:	e1 2c       	mov	r14, r1
 41c:	00 e0       	ldi	r16, 0x00	; 0
 41e:	20 e0       	ldi	r18, 0x00	; 0
 420:	42 e0       	ldi	r20, 0x02	; 2
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0e 94 8e 01 	call	0x31c	; 0x31c <timer0Init>
 42a:	80 e3       	ldi	r24, 0x30	; 48
 42c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <u8_gTCNT0PreloadValue>
 430:	82 bf       	out	0x32, r24	; 50
 432:	0e 94 01 02 	call	0x402	; 0x402 <timer0Start>
 436:	cc 0c       	add	r12, r12
 438:	dd 1c       	adc	r13, r13
 43a:	cc 0c       	add	r12, r12
 43c:	dd 1c       	adc	r13, r13
 43e:	cc 0c       	add	r12, r12
 440:	dd 1c       	adc	r13, r13
 442:	e1 2c       	mov	r14, r1
 444:	f1 2c       	mov	r15, r1
 446:	c1 14       	cp	r12, r1
 448:	d1 04       	cpc	r13, r1
 44a:	e1 04       	cpc	r14, r1
 44c:	f1 04       	cpc	r15, r1
 44e:	d9 f0       	breq	.+54     	; 0x486 <timer0DelayMs+0x78>
 450:	21 e0       	ldi	r18, 0x01	; 1
 452:	40 e0       	ldi	r20, 0x00	; 0
 454:	50 e0       	ldi	r21, 0x00	; 0
 456:	ba 01       	movw	r22, r20
 458:	80 e3       	ldi	r24, 0x30	; 48
 45a:	08 b6       	in	r0, 0x38	; 56
 45c:	00 fe       	sbrs	r0, 0
 45e:	fd cf       	rjmp	.-6      	; 0x45a <timer0DelayMs+0x4c>
 460:	2f 5f       	subi	r18, 0xFF	; 255
 462:	28 30       	cpi	r18, 0x08	; 8
 464:	19 f4       	brne	.+6      	; 0x46c <timer0DelayMs+0x5e>
 466:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <u8_gTCNT0PreloadValue>
 46a:	21 e0       	ldi	r18, 0x01	; 1
 46c:	98 b7       	in	r25, 0x38	; 56
 46e:	38 b7       	in	r19, 0x38	; 56
 470:	93 2b       	or	r25, r19
 472:	98 bf       	out	0x38, r25	; 56
 474:	4f 5f       	subi	r20, 0xFF	; 255
 476:	5f 4f       	sbci	r21, 0xFF	; 255
 478:	6f 4f       	sbci	r22, 0xFF	; 255
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	4c 15       	cp	r20, r12
 47e:	5d 05       	cpc	r21, r13
 480:	6e 05       	cpc	r22, r14
 482:	7f 05       	cpc	r23, r15
 484:	50 f3       	brcs	.-44     	; 0x45a <timer0DelayMs+0x4c>
 486:	0e 94 f6 01 	call	0x3ec	; 0x3ec <timer0Stop>
 48a:	0f 91       	pop	r16
 48c:	ff 90       	pop	r15
 48e:	ef 90       	pop	r14
 490:	df 90       	pop	r13
 492:	cf 90       	pop	r12
 494:	08 95       	ret

00000496 <timer2Init>:

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC,En_timer2perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
 496:	cf 92       	push	r12
 498:	0f 93       	push	r16
 49a:	9c 2d       	mov	r25, r12
	en_gprescal = en_prescal;
 49c:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	switch (en_mode)
 4a0:	88 23       	and	r24, r24
 4a2:	19 f0       	breq	.+6      	; 0x4aa <timer2Init+0x14>
 4a4:	88 30       	cpi	r24, 0x08	; 8
 4a6:	21 f0       	breq	.+8      	; 0x4b0 <timer2Init+0x1a>
 4a8:	06 c0       	rjmp	.+12     	; 0x4b6 <timer2Init+0x20>
	{
		case T2_NORMAL_MODE:
		TCCR2 |= T2_NORMAL_MODE;
 4aa:	85 b5       	in	r24, 0x25	; 37
 4ac:	85 bd       	out	0x25, r24	; 37
		break;
 4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <timer2Init+0x20>
		
		case T2_COMP_MODE:
		TCCR2 |= T2_COMP_MODE;
 4b0:	85 b5       	in	r24, 0x25	; 37
 4b2:	88 60       	ori	r24, 0x08	; 8
 4b4:	85 bd       	out	0x25, r24	; 37
		break;
	}
	
	switch (en_OC)
 4b6:	60 31       	cpi	r22, 0x10	; 16
 4b8:	49 f0       	breq	.+18     	; 0x4cc <timer2Init+0x36>
 4ba:	18 f4       	brcc	.+6      	; 0x4c2 <timer2Init+0x2c>
 4bc:	66 23       	and	r22, r22
 4be:	91 f0       	breq	.+36     	; 0x4e4 <timer2Init+0x4e>
 4c0:	13 c0       	rjmp	.+38     	; 0x4e8 <timer2Init+0x52>
 4c2:	60 32       	cpi	r22, 0x20	; 32
 4c4:	59 f0       	breq	.+22     	; 0x4dc <timer2Init+0x46>
 4c6:	60 33       	cpi	r22, 0x30	; 48
 4c8:	29 f0       	breq	.+10     	; 0x4d4 <timer2Init+0x3e>
 4ca:	0e c0       	rjmp	.+28     	; 0x4e8 <timer2Init+0x52>
	{
		case T2_OC2_TOGGLE:
		TCCR2 |= T2_OC2_TOGGLE;
 4cc:	85 b5       	in	r24, 0x25	; 37
 4ce:	80 61       	ori	r24, 0x10	; 16
 4d0:	85 bd       	out	0x25, r24	; 37
		break;
 4d2:	0a c0       	rjmp	.+20     	; 0x4e8 <timer2Init+0x52>
		
		case T2_OC2_SET:
		TCCR2 |= T2_OC2_SET;
 4d4:	85 b5       	in	r24, 0x25	; 37
 4d6:	80 63       	ori	r24, 0x30	; 48
 4d8:	85 bd       	out	0x25, r24	; 37
		break;
 4da:	06 c0       	rjmp	.+12     	; 0x4e8 <timer2Init+0x52>
		
		case T2_OC2_CLEAR:
		TCCR2 |= T2_OC2_CLEAR;
 4dc:	85 b5       	in	r24, 0x25	; 37
 4de:	80 62       	ori	r24, 0x20	; 32
 4e0:	85 bd       	out	0x25, r24	; 37
		break;
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <timer2Init+0x52>
		
		case T2_OC2_DIS:
		TCCR2 |= T2_OC2_DIS;
 4e4:	85 b5       	in	r24, 0x25	; 37
 4e6:	85 bd       	out	0x25, r24	; 37
		
	}
	
	switch (en_prescal)
 4e8:	50 e0       	ldi	r21, 0x00	; 0
 4ea:	48 30       	cpi	r20, 0x08	; 8
 4ec:	51 05       	cpc	r21, r1
 4ee:	18 f5       	brcc	.+70     	; 0x536 <timer2Init+0xa0>
 4f0:	fa 01       	movw	r30, r20
 4f2:	e6 5d       	subi	r30, 0xD6	; 214
 4f4:	ff 4f       	sbci	r31, 0xFF	; 255
 4f6:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__tablejump2__>
	{
		case T2_NO_CLOCK:
		TCCR2 |= T2_NO_CLOCK;
 4fa:	85 b5       	in	r24, 0x25	; 37
 4fc:	85 bd       	out	0x25, r24	; 37
		break;
 4fe:	1b c0       	rjmp	.+54     	; 0x536 <timer2Init+0xa0>
		
		case T2_PRESCALER_NO:
		TCCR2 |= T2_PRESCALER_NO;
 500:	85 b5       	in	r24, 0x25	; 37
 502:	81 60       	ori	r24, 0x01	; 1
 504:	85 bd       	out	0x25, r24	; 37
		break;
 506:	17 c0       	rjmp	.+46     	; 0x536 <timer2Init+0xa0>
		
		case T2_PRESCALER_8:
		TCCR2 |= T2_PRESCALER_8;
 508:	85 b5       	in	r24, 0x25	; 37
 50a:	82 60       	ori	r24, 0x02	; 2
 50c:	85 bd       	out	0x25, r24	; 37
		break;
 50e:	13 c0       	rjmp	.+38     	; 0x536 <timer2Init+0xa0>
		
		case T2_PRESCALER_32:
		TCCR2 |= T2_PRESCALER_32;
 510:	85 b5       	in	r24, 0x25	; 37
 512:	83 60       	ori	r24, 0x03	; 3
 514:	85 bd       	out	0x25, r24	; 37
		break;
 516:	0f c0       	rjmp	.+30     	; 0x536 <timer2Init+0xa0>
		
		case T2_PRESCALER_64:
		TCCR2 |= T2_PRESCALER_64;
 518:	85 b5       	in	r24, 0x25	; 37
 51a:	84 60       	ori	r24, 0x04	; 4
 51c:	85 bd       	out	0x25, r24	; 37
		break;
 51e:	0b c0       	rjmp	.+22     	; 0x536 <timer2Init+0xa0>
		
		case T2_PRESCALER_128:
		TCCR2 |= T2_PRESCALER_128;
 520:	85 b5       	in	r24, 0x25	; 37
 522:	85 60       	ori	r24, 0x05	; 5
 524:	85 bd       	out	0x25, r24	; 37
		break;
 526:	07 c0       	rjmp	.+14     	; 0x536 <timer2Init+0xa0>
		
		case T2_PRESCALER_256:
		TCCR2 |= T2_PRESCALER_256;
 528:	85 b5       	in	r24, 0x25	; 37
 52a:	86 60       	ori	r24, 0x06	; 6
 52c:	85 bd       	out	0x25, r24	; 37
		break;
 52e:	03 c0       	rjmp	.+6      	; 0x536 <timer2Init+0xa0>
		
		case T2_PRESCALER_1024:
		TCCR2 |= T2_PRESCALER_1024;
 530:	85 b5       	in	r24, 0x25	; 37
 532:	87 60       	ori	r24, 0x07	; 7
 534:	85 bd       	out	0x25, r24	; 37
		break;
		
	}
	
	switch (en_interruptMask)
 536:	90 34       	cpi	r25, 0x40	; 64
 538:	61 f0       	breq	.+24     	; 0x552 <timer2Init+0xbc>
 53a:	18 f4       	brcc	.+6      	; 0x542 <timer2Init+0xac>
 53c:	99 23       	and	r25, r25
 53e:	31 f0       	breq	.+12     	; 0x54c <timer2Init+0xb6>
 540:	13 c0       	rjmp	.+38     	; 0x568 <timer2Init+0xd2>
 542:	90 38       	cpi	r25, 0x80	; 128
 544:	51 f0       	breq	.+20     	; 0x55a <timer2Init+0xc4>
 546:	90 3c       	cpi	r25, 0xC0	; 192
 548:	61 f0       	breq	.+24     	; 0x562 <timer2Init+0xcc>
 54a:	0e c0       	rjmp	.+28     	; 0x568 <timer2Init+0xd2>
	{
		case T2_POLLING:
		TIMSK |= T2_POLLING;
 54c:	89 b7       	in	r24, 0x39	; 57
 54e:	89 bf       	out	0x39, r24	; 57
		break;
 550:	0b c0       	rjmp	.+22     	; 0x568 <timer2Init+0xd2>
		
		case T2_INTERRUPT_NORMAL:
		TIMSK |= T2_INTERRUPT_NORMAL;
 552:	89 b7       	in	r24, 0x39	; 57
 554:	80 64       	ori	r24, 0x40	; 64
 556:	89 bf       	out	0x39, r24	; 57
		break;
 558:	07 c0       	rjmp	.+14     	; 0x568 <timer2Init+0xd2>
		
		case T2_INTERRUPT_CMP:
		TIMSK |= T2_INTERRUPT_CMP;
 55a:	89 b7       	in	r24, 0x39	; 57
 55c:	80 68       	ori	r24, 0x80	; 128
 55e:	89 bf       	out	0x39, r24	; 57
		break;
 560:	03 c0       	rjmp	.+6      	; 0x568 <timer2Init+0xd2>
		
		case T2_ALL_INTERRUPT:
		TIMSK |= T2_ALL_INTERRUPT;
 562:	89 b7       	in	r24, 0x39	; 57
 564:	80 6c       	ori	r24, 0xC0	; 192
 566:	89 bf       	out	0x39, r24	; 57
		break;
	}
	
	TCNT2 = u8_initialValue;
 568:	24 bd       	out	0x24, r18	; 36
	OCR2  = u8_outputCompare;
 56a:	03 bd       	out	0x23, r16	; 35
}
 56c:	0f 91       	pop	r16
 56e:	cf 90       	pop	r12
 570:	08 95       	ret

00000572 <timer2SwPWM>:

void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
 572:	cf 92       	push	r12
 574:	ef 92       	push	r14
 576:	0f 93       	push	r16
	//f16_dutyCycle = (uint8_t) ((u8_dutyCycle/100.0)*(255.0)) ;
	//OCR2 = f16_dutyCycle*255;
	//OCR2 = f16_dutyCycle;
	//f16_dutyCycle = u8_dutyCycle;
	OCR2 = u8_dutyCycle;
 578:	83 bd       	out	0x23, r24	; 35
	switch(u8_frequency)
 57a:	62 30       	cpi	r22, 0x02	; 2
 57c:	39 f1       	breq	.+78     	; 0x5cc <timer2SwPWM+0x5a>
 57e:	28 f4       	brcc	.+10     	; 0x58a <timer2SwPWM+0x18>
 580:	66 23       	and	r22, r22
 582:	51 f0       	breq	.+20     	; 0x598 <timer2SwPWM+0x26>
 584:	61 30       	cpi	r22, 0x01	; 1
 586:	a9 f0       	breq	.+42     	; 0x5b2 <timer2SwPWM+0x40>
 588:	54 c0       	rjmp	.+168    	; 0x632 <timer2SwPWM+0xc0>
 58a:	64 30       	cpi	r22, 0x04	; 4
 58c:	c9 f1       	breq	.+114    	; 0x600 <timer2SwPWM+0x8e>
 58e:	58 f1       	brcs	.+86     	; 0x5e6 <timer2SwPWM+0x74>
 590:	65 30       	cpi	r22, 0x05	; 5
 592:	09 f4       	brne	.+2      	; 0x596 <timer2SwPWM+0x24>
 594:	42 c0       	rjmp	.+132    	; 0x61a <timer2SwPWM+0xa8>
 596:	4d c0       	rjmp	.+154    	; 0x632 <timer2SwPWM+0xc0>
	{
		case F_8000:
		timer2Init(T2_NORMAL_MODE,T2_OC2_DIS,T2_PRESCALER_8, 0, OCR2,0, T2_ALL_INTERRUPT);
 598:	03 b5       	in	r16, 0x23	; 35
 59a:	0f 2e       	mov	r0, r31
 59c:	f0 ec       	ldi	r31, 0xC0	; 192
 59e:	cf 2e       	mov	r12, r31
 5a0:	f0 2d       	mov	r31, r0
 5a2:	e1 2c       	mov	r14, r1
 5a4:	20 e0       	ldi	r18, 0x00	; 0
 5a6:	42 e0       	ldi	r20, 0x02	; 2
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	0e 94 4b 02 	call	0x496	; 0x496 <timer2Init>
		break;
 5b0:	40 c0       	rjmp	.+128    	; 0x632 <timer2SwPWM+0xc0>
		
		case F_2000:
		timer2Init(T2_NORMAL_MODE,T2_OC2_DIS,T2_PRESCALER_32, 0, OCR2,0, T2_ALL_INTERRUPT);
 5b2:	03 b5       	in	r16, 0x23	; 35
 5b4:	0f 2e       	mov	r0, r31
 5b6:	f0 ec       	ldi	r31, 0xC0	; 192
 5b8:	cf 2e       	mov	r12, r31
 5ba:	f0 2d       	mov	r31, r0
 5bc:	e1 2c       	mov	r14, r1
 5be:	20 e0       	ldi	r18, 0x00	; 0
 5c0:	43 e0       	ldi	r20, 0x03	; 3
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	0e 94 4b 02 	call	0x496	; 0x496 <timer2Init>
		break;
 5ca:	33 c0       	rjmp	.+102    	; 0x632 <timer2SwPWM+0xc0>
		
		case F_1000:
		timer2Init(T2_NORMAL_MODE,T2_OC2_DIS,T2_PRESCALER_64, 0, OCR2,0, T2_ALL_INTERRUPT);
 5cc:	03 b5       	in	r16, 0x23	; 35
 5ce:	0f 2e       	mov	r0, r31
 5d0:	f0 ec       	ldi	r31, 0xC0	; 192
 5d2:	cf 2e       	mov	r12, r31
 5d4:	f0 2d       	mov	r31, r0
 5d6:	e1 2c       	mov	r14, r1
 5d8:	20 e0       	ldi	r18, 0x00	; 0
 5da:	44 e0       	ldi	r20, 0x04	; 4
 5dc:	60 e0       	ldi	r22, 0x00	; 0
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	0e 94 4b 02 	call	0x496	; 0x496 <timer2Init>
		break;
 5e4:	26 c0       	rjmp	.+76     	; 0x632 <timer2SwPWM+0xc0>
		
		case F_500:
		timer2Init(T2_NORMAL_MODE,T2_OC2_DIS,T2_PRESCALER_128, 0, OCR2,0, T2_ALL_INTERRUPT);
 5e6:	03 b5       	in	r16, 0x23	; 35
 5e8:	0f 2e       	mov	r0, r31
 5ea:	f0 ec       	ldi	r31, 0xC0	; 192
 5ec:	cf 2e       	mov	r12, r31
 5ee:	f0 2d       	mov	r31, r0
 5f0:	e1 2c       	mov	r14, r1
 5f2:	20 e0       	ldi	r18, 0x00	; 0
 5f4:	45 e0       	ldi	r20, 0x05	; 5
 5f6:	60 e0       	ldi	r22, 0x00	; 0
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	0e 94 4b 02 	call	0x496	; 0x496 <timer2Init>
		break;
 5fe:	19 c0       	rjmp	.+50     	; 0x632 <timer2SwPWM+0xc0>
		
		case F_250:
		timer2Init(T2_NORMAL_MODE,T2_OC2_DIS,T2_PRESCALER_256, 0, OCR2,0, T2_ALL_INTERRUPT);
 600:	03 b5       	in	r16, 0x23	; 35
 602:	0f 2e       	mov	r0, r31
 604:	f0 ec       	ldi	r31, 0xC0	; 192
 606:	cf 2e       	mov	r12, r31
 608:	f0 2d       	mov	r31, r0
 60a:	e1 2c       	mov	r14, r1
 60c:	20 e0       	ldi	r18, 0x00	; 0
 60e:	46 e0       	ldi	r20, 0x06	; 6
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	0e 94 4b 02 	call	0x496	; 0x496 <timer2Init>
		break;
 618:	0c c0       	rjmp	.+24     	; 0x632 <timer2SwPWM+0xc0>
		
		case F_60:
		timer2Init(T2_NORMAL_MODE,T2_OC2_DIS,T2_PRESCALER_1024, 0, OCR2,0, T2_ALL_INTERRUPT);
 61a:	03 b5       	in	r16, 0x23	; 35
 61c:	0f 2e       	mov	r0, r31
 61e:	f0 ec       	ldi	r31, 0xC0	; 192
 620:	cf 2e       	mov	r12, r31
 622:	f0 2d       	mov	r31, r0
 624:	e1 2c       	mov	r14, r1
 626:	20 e0       	ldi	r18, 0x00	; 0
 628:	47 e0       	ldi	r20, 0x07	; 7
 62a:	60 e0       	ldi	r22, 0x00	; 0
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	0e 94 4b 02 	call	0x496	; 0x496 <timer2Init>
		break;
	}
}
 632:	0f 91       	pop	r16
 634:	ef 90       	pop	r14
 636:	cf 90       	pop	r12
 638:	08 95       	ret

0000063a <__vector_5>:

InterruptServiceRoutine(TIMER2_OVF_vect)
{
 63a:	1f 92       	push	r1
 63c:	0f 92       	push	r0
 63e:	0f b6       	in	r0, 0x3f	; 63
 640:	0f 92       	push	r0
 642:	11 24       	eor	r1, r1
 644:	2f 93       	push	r18
 646:	3f 93       	push	r19
 648:	4f 93       	push	r20
 64a:	5f 93       	push	r21
 64c:	6f 93       	push	r22
 64e:	7f 93       	push	r23
 650:	8f 93       	push	r24
 652:	9f 93       	push	r25
 654:	af 93       	push	r26
 656:	bf 93       	push	r27
 658:	ef 93       	push	r30
 65a:	ff 93       	push	r31
	gpioPinWrite(M1EN_GPIO, M1EN_BIT,HIGH);
 65c:	4f ef       	ldi	r20, 0xFF	; 255
 65e:	60 e1       	ldi	r22, 0x10	; 16
 660:	83 e0       	ldi	r24, 0x03	; 3
 662:	0e 94 16 01 	call	0x22c	; 0x22c <gpioPinWrite>
	gpioPinWrite(M2EN_GPIO, M2EN_BIT,HIGH);
 666:	4f ef       	ldi	r20, 0xFF	; 255
 668:	60 e2       	ldi	r22, 0x20	; 32
 66a:	83 e0       	ldi	r24, 0x03	; 3
 66c:	0e 94 16 01 	call	0x22c	; 0x22c <gpioPinWrite>
}
 670:	ff 91       	pop	r31
 672:	ef 91       	pop	r30
 674:	bf 91       	pop	r27
 676:	af 91       	pop	r26
 678:	9f 91       	pop	r25
 67a:	8f 91       	pop	r24
 67c:	7f 91       	pop	r23
 67e:	6f 91       	pop	r22
 680:	5f 91       	pop	r21
 682:	4f 91       	pop	r20
 684:	3f 91       	pop	r19
 686:	2f 91       	pop	r18
 688:	0f 90       	pop	r0
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	0f 90       	pop	r0
 68e:	1f 90       	pop	r1
 690:	18 95       	reti

00000692 <__vector_4>:

InterruptServiceRoutine(TIMER2_COMP_vect)
{
 692:	1f 92       	push	r1
 694:	0f 92       	push	r0
 696:	0f b6       	in	r0, 0x3f	; 63
 698:	0f 92       	push	r0
 69a:	11 24       	eor	r1, r1
 69c:	2f 93       	push	r18
 69e:	3f 93       	push	r19
 6a0:	4f 93       	push	r20
 6a2:	5f 93       	push	r21
 6a4:	6f 93       	push	r22
 6a6:	7f 93       	push	r23
 6a8:	8f 93       	push	r24
 6aa:	9f 93       	push	r25
 6ac:	af 93       	push	r26
 6ae:	bf 93       	push	r27
 6b0:	ef 93       	push	r30
 6b2:	ff 93       	push	r31
	gpioPinWrite(M1EN_GPIO, M1EN_BIT,LOW);
 6b4:	40 e0       	ldi	r20, 0x00	; 0
 6b6:	60 e1       	ldi	r22, 0x10	; 16
 6b8:	83 e0       	ldi	r24, 0x03	; 3
 6ba:	0e 94 16 01 	call	0x22c	; 0x22c <gpioPinWrite>
	gpioPinWrite(M2EN_GPIO, M2EN_BIT,LOW);
 6be:	40 e0       	ldi	r20, 0x00	; 0
 6c0:	60 e2       	ldi	r22, 0x20	; 32
 6c2:	83 e0       	ldi	r24, 0x03	; 3
 6c4:	0e 94 16 01 	call	0x22c	; 0x22c <gpioPinWrite>
	
 6c8:	ff 91       	pop	r31
 6ca:	ef 91       	pop	r30
 6cc:	bf 91       	pop	r27
 6ce:	af 91       	pop	r26
 6d0:	9f 91       	pop	r25
 6d2:	8f 91       	pop	r24
 6d4:	7f 91       	pop	r23
 6d6:	6f 91       	pop	r22
 6d8:	5f 91       	pop	r21
 6da:	4f 91       	pop	r20
 6dc:	3f 91       	pop	r19
 6de:	2f 91       	pop	r18
 6e0:	0f 90       	pop	r0
 6e2:	0f be       	out	0x3f, r0	; 63
 6e4:	0f 90       	pop	r0
 6e6:	1f 90       	pop	r1
 6e8:	18 95       	reti

000006ea <__tablejump2__>:
 6ea:	ee 0f       	add	r30, r30
 6ec:	ff 1f       	adc	r31, r31
 6ee:	05 90       	lpm	r0, Z+
 6f0:	f4 91       	lpm	r31, Z
 6f2:	e0 2d       	mov	r30, r0
 6f4:	09 94       	ijmp

000006f6 <_exit>:
 6f6:	f8 94       	cli

000006f8 <__stop_program>:
 6f8:	ff cf       	rjmp	.-2      	; 0x6f8 <__stop_program>
